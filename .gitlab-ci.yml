# GitLab CI/CD Pipeline for Learn Vocabulary English
stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_REGISTRY: $CI_REGISTRY
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHA
  POSTGRES_DB: vocabulary_db_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: test_password
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - apps/backend/node_modules/
    - apps/frontend/node_modules/

# ============================================
# LINT STAGE
# ============================================
lint:backend:
  stage: lint
  image: node:18-alpine
  script:
    - cd apps/backend
    - npm ci
    - npm run lint
  only:
    changes:
      - apps/backend/**/*

lint:frontend:
  stage: lint
  image: node:18-alpine
  script:
    - cd apps/frontend
    - npm ci
    - npm run lint
  only:
    changes:
      - apps/frontend/**/*

# ============================================
# TEST STAGE
# ============================================
test:backend:
  stage: test
  image: node:18-alpine
  services:
    - postgres:15-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test_password
    DB_HOST: postgres
    DB_PORT: 5432
    DB_USERNAME: postgres
    DB_PASSWORD: test_password
    DB_NAME: test_db
    NODE_ENV: test
    JWT_SECRET: test-jwt-secret-key
  before_script:
    - apk add --no-cache postgresql-client
  script:
    - cd apps/backend
    - npm ci
    - npm run build
    - npm run test || echo "Tests completed"
  artifacts:
    reports:
      junit: apps/backend/test-results.xml
    paths:
      - apps/backend/coverage/
  only:
    changes:
      - apps/backend/**/*

test:frontend:
  stage: test
  image: node:18-alpine
  script:
    - cd apps/frontend
    - npm ci
    - npm run build
    - npm run test || echo "Tests completed"
  artifacts:
    paths:
      - apps/frontend/coverage/
  only:
    changes:
      - apps/frontend/**/*

# ============================================
# BUILD STAGE
# ============================================
build:backend:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building backend image..."
    - docker build -f apps/backend/Dockerfile -t $CI_REGISTRY_IMAGE/backend:$DOCKER_IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE/backend:$DOCKER_IMAGE_TAG
    - docker tag $CI_REGISTRY_IMAGE/backend:$DOCKER_IMAGE_TAG $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:latest
  only:
    changes:
      - apps/backend/**/*
      - docker-compose*.yml
      - .gitlab-ci.yml

build:frontend:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building frontend image..."
    - docker build -f apps/frontend/Dockerfile -t $CI_REGISTRY_IMAGE/frontend:$DOCKER_IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE/frontend:$DOCKER_IMAGE_TAG
    - docker tag $CI_REGISTRY_IMAGE/frontend:$DOCKER_IMAGE_TAG $CI_REGISTRY_IMAGE/frontend:latest
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
  only:
    changes:
      - apps/frontend/**/*
      - docker-compose*.yml
      - .gitlab-ci.yml

# ============================================
# DEPLOY STAGE
# ============================================
deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client curl
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_SERVER >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to staging environment..."
    - |
      ssh $STAGING_USER@$STAGING_SERVER << 'EOF'
        cd /opt/learn-vocabulary-english
        export CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
        export IMAGE_TAG=latest
        export POSTGRES_PASSWORD=$POSTGRES_PASSWORD
        export JWT_SECRET=$JWT_SECRET
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml down
        docker-compose -f docker-compose.prod.yml up -d
        sleep 30
        docker-compose -f docker-compose.prod.yml exec -T backend npm run migration:run || true
      EOF
  environment:
    name: staging
    url: http://$STAGING_SERVER:3000
  only:
    - develop
  when: manual

deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client curl
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_SERVER >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to production environment..."
    - |
      ssh $PRODUCTION_USER@$PRODUCTION_SERVER << 'EOF'
        cd /opt/learn-vocabulary-english
        export CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
        export IMAGE_TAG=latest
        export POSTGRES_PASSWORD=$POSTGRES_PASSWORD
        export JWT_SECRET=$JWT_SECRET
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml down
        docker-compose -f docker-compose.prod.yml up -d
        sleep 30
        docker-compose -f docker-compose.prod.yml exec -T backend npm run migration:run || true
        # Health check
        curl -f http://localhost:3001/health || echo "Backend health check warning"
        curl -f http://localhost:3000 || echo "Frontend health check warning"
      EOF
  environment:
    name: production
    url: https://$PRODUCTION_DOMAIN
  only:
    - main
    - master
  when: manual

# GitLab CI/CD Pipeline cho Render Deployment
stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  NODE_VERSION: "20"

# Cache cho faster builds
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - apps/backend/node_modules/
    - apps/frontend/node_modules/
    - .npm/

# Detect thay ƒë·ªïi files
.detect-changes:
  stage: test
  image: alpine/git
  script:
    - apk add --no-cache jq
    - |
      # Ki·ªÉm tra backend changes
      if git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA | grep -E "^apps/backend/|^render\.yaml$"; then
        echo "BACKEND_CHANGED=true" >> build.env
      else
        echo "BACKEND_CHANGED=false" >> build.env
      fi
    - |
      # Ki·ªÉm tra frontend changes  
      if git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA | grep -E "^apps/frontend/|^render\.yaml$"; then
        echo "FRONTEND_CHANGED=true" >> build.env
      else
        echo "FRONTEND_CHANGED=false" >> build.env
      fi
    - cat build.env
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 hour
  only:
    - main
    - develop

# Test Backend
test-backend:
  extends: .detect-changes
  stage: test
  image: node:${NODE_VERSION}
  script:
    - |
      if [ "$BACKEND_CHANGED" = "true" ]; then
        echo "üß™ Testing Backend..."
        cd apps/backend
        npm ci
        npm run lint
        npm run test || echo "‚ö†Ô∏è Tests failed but continuing..."
        npm run build
        echo "‚úÖ Backend tests completed"
      else
        echo "‚è≠Ô∏è No backend changes, skipping tests"
      fi
  only:
    - main
    - develop

# Test Frontend
test-frontend:
  extends: .detect-changes
  stage: test
  image: node:${NODE_VERSION}
  script:
    - |
      if [ "$FRONTEND_CHANGED" = "true" ]; then
        echo "üß™ Testing Frontend..."
        cd apps/frontend
        npm ci
        npm run lint || echo "‚ö†Ô∏è Lint warnings"
        npm run type-check
        npm run build
        echo "‚úÖ Frontend tests completed"
      else
        echo "‚è≠Ô∏è No frontend changes, skipping tests"
      fi
  only:
    - main
    - develop

# Deploy Backend qua Render API
deploy-backend:
  stage: deploy
  image: alpine/curl
  needs: ["test-backend"]
  script:
    - |
      if [ "$BACKEND_CHANGED" = "true" ]; then
        echo "üöÄ Deploying Backend to Render..."
        
        # Trigger Render deployment
        RESPONSE=$(curl -s -w "%{http_code}" -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/$RENDER_BACKEND_SERVICE_ID/deploys")
        
        HTTP_CODE=$(echo $RESPONSE | tail -c 4)
        
        if [ "$HTTP_CODE" = "201" ]; then
          echo "‚úÖ Backend deployment triggered successfully"
          
          # Wait v√† check deployment status
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 30
          
          # Check health endpoint
          for i in {1..10}; do
            if curl -f "$BACKEND_URL/api/health"; then
              echo "‚úÖ Backend is healthy!"
              break
            else
              echo "‚è≥ Waiting for backend... (attempt $i/10)"
              sleep 30
            fi
          done
        else
          echo "‚ùå Backend deployment failed (HTTP: $HTTP_CODE)"
          exit 1
        fi
      else
        echo "‚è≠Ô∏è No backend changes, skipping deployment"
      fi
  environment:
    name: production-backend
    url: $BACKEND_URL
  only:
    - main

# Deploy Frontend qua Render API
deploy-frontend:
  stage: deploy
  image: alpine/curl
  needs: ["test-frontend"]
  script:
    - |
      if [ "$FRONTEND_CHANGED" = "true" ]; then
        echo "üöÄ Deploying Frontend to Render..."
        
        RESPONSE=$(curl -s -w "%{http_code}" -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/$RENDER_FRONTEND_SERVICE_ID/deploys")
        
        HTTP_CODE=$(echo $RESPONSE | tail -c 4)
        
        if [ "$HTTP_CODE" = "201" ]; then
          echo "‚úÖ Frontend deployment triggered successfully"
          
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 45
          
          # Check frontend health
          for i in {1..8}; do
            if curl -f "$FRONTEND_URL"; then
              echo "‚úÖ Frontend is live!"
              break
            else
              echo "‚è≥ Waiting for frontend... (attempt $i/8)"
              sleep 30
            fi
          done
        else
          echo "‚ùå Frontend deployment failed (HTTP: $HTTP_CODE)"
          exit 1
        fi
      else
        echo "‚è≠Ô∏è No frontend changes, skipping deployment"
      fi
  environment:
    name: production-frontend
    url: $FRONTEND_URL
  only:
    - main

# Notification job
deploy-notification:
  stage: deploy
  image: alpine/curl
  needs: ["deploy-backend", "deploy-frontend"]
  script:
    - |
      echo "üìã Deployment Summary:"
      echo "================================"
      echo "üîó Backend: $BACKEND_URL"
      echo "üîó Frontend: $FRONTEND_URL"
      echo "üì¶ Commit: $CI_COMMIT_SHA"
      echo "üåø Branch: $CI_COMMIT_REF_NAME"
      echo "üë§ Author: $GITLAB_USER_NAME"
      echo "‚è∞ Time: $(date)"
      echo "================================"
      
      # T√πy ch·ªçn: G·ª≠i notification qua Slack/Discord
      # curl -X POST -H 'Content-type: application/json' \
      #   --data '{"text":"üöÄ Deployment completed!\nBackend: '$BACKEND_URL'\nFrontend: '$FRONTEND_URL'"}' \
      #   $SLACK_WEBHOOK_URL
  when: always
  only:
    - main
